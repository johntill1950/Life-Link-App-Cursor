LIFE-LINK HYBRID APP DEVELOPMENT CHECKLIST & CODE STRUCTURE TIPS
===============================================================

## 1. General Checklist for Hybrid (Web + Native) App

- [ ] Use a shared backend (API, database) for all platforms.
- [ ] Design your database and API to be platform-agnostic (no platform-specific logic in backend).
- [ ] Use a unified authentication system (e.g., Supabase Auth, Firebase Auth).
- [ ] Store device tokens for push notifications for both web and mobile users.
- [ ] Implement role-based access (e.g., regular user, emergency contact, dispatch center).
- [ ] Use the same subscription/alert logic for all platforms.
- [ ] Test push notifications on both web and mobile.
- [ ] Keep business logic (alerting, subscriptions, etc.) in the backend, not in the frontend.
- [ ] Use environment variables/config files for platform-specific settings (e.g., FCM keys).
- [ ] Document your API endpoints and data models.
- [ ] Use feature flags or config to enable/disable features per platform if needed.

## 2. Code Structure Tips

### Backend (API, Database)
- /api
  - /alerts
  - /subscriptions
  - /users
  - /notifications
- /models
  - user.js/ts
  - subscription.js/ts
  - deviceToken.js/ts
- /utils
  - notificationSender.js/ts (handles both web and mobile tokens)

### Web App (React/Next.js)
- /src
  - /components
  - /pages
  - /lib (shared logic, API calls)
  - /hooks
  - /contexts
  - /utils

### Mobile App (React Native/Expo)
- /src
  - /components
  - /screens
  - /lib (shared logic, API calls)
  - /hooks
  - /contexts
  - /utils

### Shared Code
- Keep business logic (e.g., alert triggering, subscription management) in /lib or /utils so it can be reused.
- Use TypeScript for type safety and easier code sharing.
- Use environment variables for platform-specific config (e.g., .env, app.json).

### Push Notification Handling
- Store device tokens in a single table (e.g., device_tokens) with user_id and platform fields.
- Backend sends notifications to all tokens for a user/role, regardless of platform.
- Use a notification utility/service in the backend to abstract sending logic.

### Role-Based Access
- Use roles/permissions in your database (e.g., user, emergency_contact, dispatch_center).
- Restrict API endpoints and UI features based on role.

### Documentation
- Keep a /docs folder or README files for onboarding and reference.
- Document API endpoints, data models, and notification flows.

## 3. Migration Tips
- Avoid browser-only APIs in shared logic.
- Use feature detection for platform-specific features.
- Modularize code for easy extraction to mobile or web.

## 4. Testing
- Test all critical flows on both web and mobile.
- Use emulators/simulators for mobile, and multiple browsers for web.

## 5. Maintenance
- Regularly update dependencies for both web and mobile projects.
- Keep documentation up to date.

---

Keep this file as a reference as you build and scale Life-Link! 